# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: localhost:4000/miso-evaluation
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 0.5Gi
  mountPath: /data/json

miso:
  evaluation:
    redis:
      redisUrl: "redis://demo01.redis.svc.cluster.local:10868"
    minio:
      accessToken: "zRyjrHc2uNnRNm8V"
      secretKey: "ErEefr6CVWjYY5uw535rJHAUinnUYsCx"


kube-prometheus-stack:
  prometheus-node-exporter:
    resources:
      limits:
        cpu: "100m"
        memory: "500Mi"
      requests:
        cpu: "50m"
        memory: "100Mi"
  grafana:
    resources:
      limits:
        cpu: "200m"  # 200 millicpu
        memory: "500Mi"  # 300 Megabytes
      requests:
        cpu: "100m"  # 100 millicpu
        memory: "200Mi"  # 200 Megabytes
  prometheus:
    prometheusSpec:
      scrapeInterval: "5s"
      podMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector:
        matchLabels:
          prometheus: "true"
      podMonitorNamespaceSelector: {}
      serviceMonitorNamespaceSelector: {}
      resources:
        limits:
          cpu: "500m"  # 500 millicpu
          memory: "2Gi"  # 2 Gigabytes
        requests:
          cpu: "250m"  # 250 millicpu
          memory: "1Gi"  # 1 Gigabyte
      #logLevel: debug
    #logLevel: debug
  prometheusOperator:
    enabled: true
    #logLevel: debug
# prometheus:
#   server:
#     resources:
#       limits:
#         memory: "1Gi"
#       requests:
#         memory: "128Mi"
#   prometheusSpec:
#     podMonitorSelector:
#       matchLabels:
#         prometheus: "true"
#     logLevel: debug
#     podMonitorSelectorNilUsesHelmValues: false
#   prometheusOperator:
#     logLevel: debug

# grafana:
#   adminPassword: "test123"
#   service:
#     type: LoadBalancer

podMonitor:
  name: miso-middleware-monitor
  interval: "5s"
  path: "/metrics"
  targetPort: 3001
  misoNamespace: "miso"
  selector:
    k8s-app: miso-middleware