/*
Copyright 2019-2021 OpenFaaS Authors

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// FunctionSpecApplyConfiguration represents an declarative configuration of the FunctionSpec type for use
// with apply.
type FunctionSpecApplyConfiguration struct {
	Name                   *string                              `json:"name,omitempty"`
	Image                  *string                              `json:"image,omitempty"`
	Handler                *string                              `json:"handler,omitempty"`
	Annotations            *map[string]string                   `json:"annotations,omitempty"`
	Labels                 *map[string]string                   `json:"labels,omitempty"`
	Environment            *map[string]string                   `json:"environment,omitempty"`
	Constraints            []string                             `json:"constraints,omitempty"`
	Secrets                []string                             `json:"secrets,omitempty"`
	Limits                 *FunctionResourcesApplyConfiguration `json:"limits,omitempty"`
	Requests               *FunctionResourcesApplyConfiguration `json:"requests,omitempty"`
	ReadOnlyRootFilesystem *bool                                `json:"readOnlyRootFilesystem,omitempty"`
}

// FunctionSpecApplyConfiguration constructs an declarative configuration of the FunctionSpec type for use with
// apply.
func FunctionSpec() *FunctionSpecApplyConfiguration {
	return &FunctionSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithName(value string) *FunctionSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithImage(value string) *FunctionSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithHandler sets the Handler field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Handler field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithHandler(value string) *FunctionSpecApplyConfiguration {
	b.Handler = &value
	return b
}

// WithAnnotations sets the Annotations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Annotations field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithAnnotations(value map[string]string) *FunctionSpecApplyConfiguration {
	b.Annotations = &value
	return b
}

// WithLabels sets the Labels field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Labels field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithLabels(value map[string]string) *FunctionSpecApplyConfiguration {
	b.Labels = &value
	return b
}

// WithEnvironment sets the Environment field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Environment field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithEnvironment(value map[string]string) *FunctionSpecApplyConfiguration {
	b.Environment = &value
	return b
}

// WithConstraints adds the given value to the Constraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Constraints field.
func (b *FunctionSpecApplyConfiguration) WithConstraints(values ...string) *FunctionSpecApplyConfiguration {
	for i := range values {
		b.Constraints = append(b.Constraints, values[i])
	}
	return b
}

// WithSecrets adds the given value to the Secrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Secrets field.
func (b *FunctionSpecApplyConfiguration) WithSecrets(values ...string) *FunctionSpecApplyConfiguration {
	for i := range values {
		b.Secrets = append(b.Secrets, values[i])
	}
	return b
}

// WithLimits sets the Limits field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Limits field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithLimits(value *FunctionResourcesApplyConfiguration) *FunctionSpecApplyConfiguration {
	b.Limits = value
	return b
}

// WithRequests sets the Requests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requests field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithRequests(value *FunctionResourcesApplyConfiguration) *FunctionSpecApplyConfiguration {
	b.Requests = value
	return b
}

// WithReadOnlyRootFilesystem sets the ReadOnlyRootFilesystem field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadOnlyRootFilesystem field is set to the value of the last call.
func (b *FunctionSpecApplyConfiguration) WithReadOnlyRootFilesystem(value bool) *FunctionSpecApplyConfiguration {
	b.ReadOnlyRootFilesystem = &value
	return b
}
